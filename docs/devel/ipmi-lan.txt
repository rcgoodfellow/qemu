IPMI over LAN
=============
~ Ryan Goodfellow <ry@goodwu.net>

Overview
--------

This document describes the implementation of IPMI over LAN in QEMU. The IPMI
over LAN functionality allows a QEMU virtual machine to be controlled using the
IPMI protocol through its network interface. It does this by looking at packet
headers that come through the network interface to see if they identify as IPMI
protocol messages. If so, the packets are forwarded to the BMC, if not they
continue on their normal path. IPMI over LAN support builds on existing IPMI
functionality in QEMU. In particular, IPMI packets destined for the BMC are
forwarded to the ipmi-bmc-sim device.

The general structure of a system that supports IPMI over LAN looks like the
following

   +==========+        +============+
   | Ethernet |        |    LAN     |   SMBus   +=====+
   |   PHY    |--------| Controller |-----------| BMC |
   +==========+        +============+           +=====+

The IPMI over LAN functionality is currently implemented for the following
network devices.
  - e1000

Usage
-----

Here is a simple example of enabling the support on an e1000 device in user mode
networking. Support is not limited to user type netdevs, the ipmi option should
work in any situation in which a supported network device is being used.

qemu-system-x86_64 -netdev user,id=net0 -device e1000,netdev=net0,ipmi


Protocol
--------

RCMP message

    | . 3 . . . . . . . . . 2 . . . . . . . . . 1 . . . . . . . . . 0 |
    | 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 |
    |=================================================================|
  ~ :                            preamble                             | Ethernet
    |-----------------------------------------------------------------|
  ~ | start of frame |                                                :
    |-----------------------------------------------------------------|
  4 :                        destination mac                          |
    |-----------------------------------------------------------------|
  8 :         source mac             |                                :
    |-----------------------------------------------------------------|
 12 |                                                                 :
    |-----------------------------------------------------------------|
 16 |                          802.1Q tag                             |
 ~~ |-----------------------------------------------------------------|
 18 | > > > > > > > > > > > > > > > >|         Ethertype              |
    |+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++|
 22 |       Total Length             |ECN|   DSCP    |  IHL  | version| IP
    |-----------------------------------------------------------------|
 26 |       fragment offset    |flags|          identification        |
    |-----------------------------------------------------------------|
 30 |     ip checksum                |  protocol     |   TTL          |
    |-----------------------------------------------------------------|
 34 |                       source address                            |
    |-----------------------------------------------------------------|
 38 |                     destination address                         |
    |-----------------------------------------------------------------|
    :                                                                 |
    :                             options                             :
    :                                                                 :
    |                                                                 :
    |+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++|
    |     destination port           |          source port           | UDP
    |-----------------------------------------------------------------|
    |     checksum                   |          length                |
    |+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++|
    |    class      |   sequence     |   reserved  |     version      | RCMP
    |+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++|
    :                     session id               |   auth/format    | IPMI
    |-----------------------------------------------------------------|
    :                    session seq               |                  :
    |-----------------------------------------------------------------|
    :                                | payload len |                  :
    :                                ---------------------------------|
    :                                                                 |
    :                           ~ payload ~                           :
    |                                                                 :
    |-----------------------------------------------------------------|
    |                                |   next hdr  |    pad length    |
    :~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~:

Data is variable length. The class byte is further broken down into the
following bits

RCMP ACK [7:1]
  0 - normal message
  1 - ACK message
Reserved [6:2]
Class    [4:4]
  0-5  - reserved
  6    - ASF
  7    - IPMI
  8    - OEM
  9-16 - reserved

The implemntation supports the following class:message combinations

RCMP:ACK
ASF:Ping
ASF:Pong

IPMI Payload
------------

Network function codes of interest:

  00, 01 - Chassis Commands


rsaddr:             1B                  - responder address
netfn:              6b                  - network function
rsl:                2b                  - responder logical unit
checksum:           1B                  - 8-bit checksum
rqaddr:             1B                  - requestor address
seq:                6b                  - sequence number
rql:                2b                  - requestor logical unit
cmd:                1B                  - command id
completion code:    1B                  - indicates success/failure of request
data:               ~ (variable length) - command data

IPMI Request:

  | . 3 . . . . . . . . . 2 . . . . . . . . . 1 . . . . . . . . . 0|
  | 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0|
  |================================================================|
  |      rqaddr    |    checksum   |netfn(even)|rsl|     rsaddr    | 
  |----------------------------------------------------------------|
  :         ~  data  ~             |     cmd       |    seq    |rql|
  |----------------------------------------------------------------|
  |    checksum    |                     ~~~                       :
  |----------------------------------------------------------------|


IPMI response:

  | . 3 . . . . . . . . . 2 . . . . . . . . . 1 . . . . . . . . . 0|
  | 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0|
  |================================================================|
  |      rsaddr    |    checksum   |netfn(odd) |rql|     rqaddr    |
  |----------------------------------------------------------------|
  :           ~  data  ~           |      cmd      |     seq   |rsl|
  |----------------------------------------------------------------|
  |    checksum    |                     ~~~                       :
  |----------------------------------------------------------------|


Chassis commands of interest:
  Get Chassis Status:     0x01
  Chassis Control:        0x02
  Chassis Reset:          0x03

Get Chassis Status
------------------

request:
  
  no data

response:

  | . 3 . . . . . . . . . 2 . . . . . . . . . 1 . . . . . . . . . 0|
  | 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0|
  |================================================================|
  |   misc state   |  power event  |  power state  |completion code|
  |----------------------------------------------------------------|

  power state:
    [7:1] - reserved
    [5:2] - power restore policy
              00 = chassis stays off after power recovery
              01 = chassis returns to previous state after power recovery
              10 = chassis powers up after power recovery
              11 = unknown
    [4:1] - power control fault
              1 = controller failed to turn off system
    [3:1] - power fault
              1 = main power has failed
    [2:1] - interlock
              1 = system shutdown due to panel interlock
    [1:1] - power overload
              1 = system shutdown due to overload
    [0:1] - power
              1 = on
              0 = off

  last power event:
    [5:3] - reserved
    [4:1] - power on
    [3:1] - power down via fault
    [2:1] - power down vian interlock
    [1:1] - power down via overload
    [0:1] - AC failed

  misc state:
    [7:1] - reserved
    [6:1] - chassis identify command and state info supported
    [4:2] - chassis identity state
    [3:1] - cooling fault detected
    [2:1] - drive fault detected
    [1:1] - front panel lockout active
    [0:1] - chassis intrusion active
    
  

Chassis Control Command
-----------------------

request:

  | . 3 . . . . . . . . . 2 . . . . . . . . . 1 . . . . . . . . . 0|
  | 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0|
  |================================================================|
  | > > > > > > > > > > > > > > > > > > > > > > > >|     data      |
  |----------------------------------------------------------------|

  The > indicates beyond the boundary of the message.

  data:
    [4:4] - reserved
    [0:4] - command
              0x0 - power down
              0x1 - power up
              0x2 - power cycle
              0x3 - hard reset
              0x4 - pulse diagnostic interrupt
              0x5 - soft acpi shutdown

response

  | . 3 . . . . . . . . . 2 . . . . . . . . . 1 . . . . . . . . . 0|
  | 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0|
  |================================================================|
  | > > > > > > > > > > > > > > > > > > > > > > > >|completion code|
  |----------------------------------------------------------------|


Chassis status protocol
-----------------------


 *-------*                              *--------*
 |  app  |                              |  ipmi  |
 *-------*                              *--------*
     |        app::get_channel_auth          |
     |<------------------------------------->|
     |                                       |
     |             open session              |
     |<------------------------------------->|
     |                                       |
     |    app::set_session_priv_level        |
     |<------------------------------------->|
     |                                       |
     |         app::get_device_ id           |
     |<------------------------------------->|
     |                                       |
     |                                       |
     |                                       |
     |                                       |
     |                                       |
     |                                       |
     |                                       |
     |                                       |
     |                                       |
     |                                       |
     |                                       |
     |                                       |
     |                                       |
